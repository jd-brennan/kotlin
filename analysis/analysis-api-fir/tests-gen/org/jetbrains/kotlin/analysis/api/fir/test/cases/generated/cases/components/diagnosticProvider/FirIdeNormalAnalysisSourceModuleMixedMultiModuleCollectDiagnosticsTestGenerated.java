/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.components.diagnosticProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.diagnosticProvider.AbstractMixedMultiModuleCollectDiagnosticsTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeNormalAnalysisSourceModuleMixedMultiModuleCollectDiagnosticsTestGenerated extends AbstractMixedMultiModuleCollectDiagnosticsTest {
    @NotNull
    @Override
    public AnalysisApiTestConfigurator getConfigurator() {
        return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
            new AnalysisApiTestConfiguratorFactoryData(
                FrontendKind.Fir,
                TestModuleKind.Source,
                AnalysisSessionMode.Normal,
                AnalysisApiMode.Ide,
                true
            )
        );
    }

    @Test
    public void testAllFilesPresentInMixedMultiModule() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Nested
    @TestMetadata("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
        @Test
        public void testAllFilesPresentInWhen() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule/when"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("sealedClassFromLibraryExhaustive.kt")
        public void testSealedClassFromLibraryExhaustive() throws Exception {
            runTest("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule/when/sealedClassFromLibraryExhaustive.kt");
        }

        @Test
        @TestMetadata("sealedClassFromLibraryMissingCase.kt")
        public void testSealedClassFromLibraryMissingCase() throws Exception {
            runTest("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule/when/sealedClassFromLibraryMissingCase.kt");
        }

        @Test
        @TestMetadata("sealedInterfaceFromLibraryExhaustive.kt")
        public void testSealedInterfaceFromLibraryExhaustive() throws Exception {
            runTest("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule/when/sealedInterfaceFromLibraryExhaustive.kt");
        }

        @Test
        @TestMetadata("sealedInterfaceFromLibraryMissingCase.kt")
        public void testSealedInterfaceFromLibraryMissingCase() throws Exception {
            runTest("analysis/analysis-api/testData/components/diagnosticsProvider/mixedMultiModule/when/sealedInterfaceFromLibraryMissingCase.kt");
        }
    }
}
